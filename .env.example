# ============================================================================
# EAV ORCHESTRATOR ENVIRONMENT CONFIGURATION
# ============================================================================
# Copy this file to .env and fill in your actual values
# NEVER commit the .env file to version control
#
# Project: EAV Orchestrator - Collaborative Video Production System
# Supabase Project: tsizhlsbmwytqccjavap
# ============================================================================

# ============================================================================
# CORE APPLICATION CONFIGURATION
# ============================================================================

# Environment (development | staging | production)
NODE_ENV=development

# Application Version (semantic versioning)
VITE_APP_VERSION=1.0.0

# Application URLs
VITE_APP_URL=http://localhost:5173
VITE_API_URL=http://localhost:3001

# ============================================================================
# SUPABASE CONFIGURATION (REQUIRED)
# ============================================================================
# Get these from Supabase Dashboard > Settings > API section
# Project URL: https://supabase.com/dashboard/project/tsizhlsbmwytqccjavap

# Supabase Project URL (https://[project-ref].supabase.co)
VITE_SUPABASE_URL=https://tsizhlsbmwytqccjavap.supabase.co
SUPABASE_URL=https://tsizhlsbmwytqccjavap.supabase.co

# Supabase Anonymous/Public Key (safe for client-side)
# This key is safe to expose in frontend code
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key-here
SUPABASE_ANON_KEY=your-supabase-anon-key-here

# Supabase Service Role Key (server-side only - KEEP SECRET!)
# WARNING: Never expose this in client-side code
SUPABASE_SERVICE_KEY=your-supabase-service-role-key-here
SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key-here

# ============================================================================
# DATABASE CONNECTION STRINGS
# ============================================================================
# For different connection modes and use cases
# Get these from Supabase Dashboard > Settings > Database

# PRIMARY: Transaction Mode Pooler (Port 6543)
# Use for: API connections, short-lived operations
DATABASE_URL=postgres://postgres.[project-ref]:[password]@aws-1-eu-west-2.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1

# SECONDARY: Session Mode Pooler (Port 5432)
# Use for: Migrations, long-running operations, prepared statements
DIRECT_DATABASE_URL=postgres://postgres.[project-ref]:[password]@aws-1-eu-west-2.pooler.supabase.com:5432/postgres
MIGRATION_DATABASE_URL=postgres://postgres.[project-ref]:[password]@aws-1-eu-west-2.pooler.supabase.com:5432/postgres

# Project Reference and Credentials
SUPABASE_PROJECT_REF=tsizhlsbmwytqccjavap
SUPABASE_DB_PASSWORD=your-database-password-here

# ============================================================================
# COLLABORATION CONFIGURATION
# ============================================================================

# Y.js WebRTC Configuration (optional - for peer-to-peer fallback)
VITE_YJS_WEBRTC_ENABLED=false
VITE_YJS_WEBRTC_SIGNALING=wss://signaling.yjs.dev

# Collaboration Settings
VITE_COLLABORATION_PROJECT_ID=eav-orchestrator-main
VITE_COLLABORATION_AUTO_SAVE=true
VITE_COLLABORATION_AUTO_SAVE_DELAY=1000

# ============================================================================
# EXTERNAL API INTEGRATIONS
# ============================================================================

# SmartSuite API (Phase 4 - Week 4 Integration)
# Get from SmartSuite account settings
SMARTSUITE_API_KEY=your-smartsuite-api-key-here
SMARTSUITE_WORKSPACE_ID=your-smartsuite-workspace-id-here
SMARTSUITE_ACCOUNT_ID=your-smartsuite-account-id-here
VITE_SMARTSUITE_API_URL=https://api.smartsuite.com/v1

# ElevenLabs API (Voice Generation)
# Get from ElevenLabs account dashboard
ELEVENLABS_API_KEY=your-elevenlabs-api-key-here
ELEVENLABS_VOICE_ID=your-default-voice-id-here
VITE_ELEVENLABS_API_URL=https://api.elevenlabs.io/v1

# LucidLink (File Storage)
# Local mount path for shared storage
LUCIDLINK_PATH=/Volumes/elevana-av/eav-production-hub/
LUCIDLINK_API_KEY=your-lucidlink-api-key-if-needed

# ============================================================================
# BACKEND FOR FRONTEND (BFF) CONFIGURATION
# ============================================================================
# Only needed if running separate BFF service

BFF_PORT=3001
BFF_HOST=localhost
BFF_CORS_ORIGINS=http://localhost:5173,http://localhost:3000

# Rate Limiting
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW_MS=900000

# ============================================================================
# CACHING & PERFORMANCE
# ============================================================================

# Redis Configuration (optional - for distributed caching)
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=your-redis-password-if-needed

# Circuit Breaker Settings
VITE_CIRCUIT_BREAKER_TIMEOUT=5000
VITE_CIRCUIT_BREAKER_ERROR_THRESHOLD=30
VITE_CIRCUIT_BREAKER_RESET_TIMEOUT=20000

# ============================================================================
# MONITORING & OBSERVABILITY
# ============================================================================

# Sentry Error Tracking (Production)
VITE_SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
VITE_SENTRY_ENVIRONMENT=development
VITE_SENTRY_TRACES_SAMPLE_RATE=0.1

# DataDog APM (optional)
DATADOG_API_KEY=your-datadog-api-key-here
DATADOG_APP_KEY=your-datadog-app-key-here

# Logging
LOG_LEVEL=debug
VITE_LOG_LEVEL=info

# ============================================================================
# SECURITY & AUTHENTICATION
# ============================================================================

# JWT Configuration
JWT_SECRET=your-jwt-secret-key-here-minimum-32-characters
JWT_EXPIRES_IN=7d

# Session Configuration
SESSION_SECRET=your-session-secret-key-here-minimum-32-characters
SESSION_MAX_AGE=86400000

# CORS Configuration
CORS_ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000

# ============================================================================
# FEATURE FLAGS
# ============================================================================

# Enable/disable features during development
VITE_FEATURE_VOICE_GENERATION=true
VITE_FEATURE_REALTIME_COLLABORATION=true
VITE_FEATURE_SMARTSUITE_SYNC=false
VITE_FEATURE_DEBUG_MODE=true

# ============================================================================
# KNOWLEDGE PLATFORM CONFIGURATION
# ============================================================================
# Separate schema in same Supabase instance

KNOWLEDGE_PLATFORM_SCHEMA=knowledge_platform
KNOWLEDGE_PLATFORM_ENABLED=true

# ============================================================================
# DEPLOYMENT CONFIGURATION
# ============================================================================

# Vercel (if deploying to Vercel)
VERCEL_URL=
VERCEL_ENV=development

# CI/CD
CI=false

# ============================================================================
# DEVELOPMENT TOOLS
# ============================================================================

# Hot Module Replacement
VITE_HMR_PORT=5173
VITE_HMR_HOST=localhost

# Source Maps
GENERATE_SOURCEMAP=true

# ============================================================================
# NOTES & WARNINGS
# ============================================================================
#
# CRITICAL SECURITY NOTES:
# 1. NEVER commit .env file with real values to git
# 2. NEVER expose SERVICE_KEY in client-side code
# 3. Rotate all API keys regularly
# 4. Use different keys for dev/staging/production
#
# REQUIRED FOR BASIC OPERATION:
# - VITE_SUPABASE_URL
# - VITE_SUPABASE_ANON_KEY
# - VITE_COLLABORATION_PROJECT_ID (for Y.js collaboration)
#
# REQUIRED FOR WEEK 3+ FEATURES:
# - SMARTSUITE_* variables (Week 4 integration)
# - ELEVENLABS_* variables (Voice generation)
# - BFF_* variables (If using separate backend)
#
# KNOWLEDGE PLATFORM:
# The knowledge_platform schema is isolated but in the same Supabase instance.
# It stores SmartSuite field mappings and API patterns for the MCP shim.
#
# ============================================================================
