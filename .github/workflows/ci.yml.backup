# TESTGUARD_APPROVED: Maintains zero-tolerance CI integrity per consultation be92c7f5-0d20-47cf-b626-5f1e06c613be
# Critical-Engineer: consulted for CI/CD quality gate implementation
name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main, project-migration]

jobs:
  # P0 CRITICAL: Core quality gates implementation per critical-engineer blocking assessment
  test-and-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Node.js setup for quality gate execution
      # Critical-Engineer: Aligned with local development v22.19.0 for environment parity
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      # Cache optimization for faster builds
      - name: Cache node modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          
      # Install dependencies - BLOCKING if fails
      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
        
      # TRACED Protocol E-gate enforcement: Lint must pass
      - name: Lint Check (Zero Tolerance)
        run: npm run lint
        
      # TRACED Protocol E-gate enforcement: TypeScript must pass
      - name: Type Check
        run: npm run typecheck
        
      # TRACED Protocol E-gate enforcement: Infrastructure tests must pass
      # Per TestGuard directive - exclude RED state TDD tests
      - name: Run Infrastructure Tests (Must Pass)
        run: npm test
        env:
          # Test environment configuration
          NODE_ENV: test
          # Memory optimization for Node.js processes
          NODE_OPTIONS: "--max-old-space-size=8192"

      # Critical-Engineer: Security vulnerability scanning - MUST PASS
      - name: Security Audit
        run: npm audit --omit=dev --audit-level=high
        continue-on-error: false
          
      # Upload test artifacts on failure for debugging
      - name: Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            coverage/
            test-results.xml
            *.log
      
      # Essential structural checks - MUST PASS
      - name: Validate Directory Structure
        run: |
          echo "Checking required files and directories..."
          test -d docs || (echo "‚ùå docs/ directory missing" && exit 1)
          test -f README.md || (echo "‚ùå README.md missing" && exit 1)
          test -f CLAUDE.md || (echo "‚ùå CLAUDE.md missing" && exit 1)
          echo "‚úÖ Directory structure valid"
      
      # HestAI Documentation Standards Validation - MUST PASS
      # Based on hestai-doc-steward consultation
      - name: Validate HestAI Documentation Standards
        run: |
          echo "Running HestAI documentation standards validation..."
          # Make script executable
          chmod +x scripts/validate-docs.sh
          # Run validation with blocking checks only
          ./scripts/validate-docs.sh --blocking-only
          
      # Security scanning - MUST PASS
      - name: Check for Committed Secrets (PR)
        if: github.event_name == 'pull_request'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --debug --only-verified
          
      # For push events, scan the whole repository
      - name: Check for Committed Secrets (Push)
        if: github.event_name == 'push'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified
          
      # File size validation - MUST PASS
      - name: Validate No Large Files
        run: |
          echo "Checking for large files..."
          large_files=$(find . -type f -size +1M | grep -v "^./.git" | grep -v "node_modules" || true)
          if [ -n "$large_files" ]; then
            echo "‚ùå Large files detected (>1MB):"
            echo "$large_files"
            exit 1
          fi
          echo "‚úÖ No large files detected"
        
      # Document required ADRs exist - WARNING ONLY during early phases
      - name: Check for ADRs
        run: |
          echo "Checking for Architectural Decision Records..."
          if [ -d "docs/adr" ]; then
            adr_count=$(find docs/adr -name "*.md" -type f | wc -l)
            echo "‚úÖ Found $adr_count ADR(s)"
          else
            echo "‚ö†Ô∏è  Warning: No ADR directory found (will be required after B0)"
            # Not failing during initial setup
          fi

  # NON-BLOCKING: Feature tests track RED state TDD tests
  # Per TestGuard directive - make CI smarter, not tests dumber
  feature-tests:
    runs-on: ubuntu-latest
    continue-on-error: true  # Allowed to fail
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache node modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Feature Tests (RED State TDD)
        run: |
          echo "üî¥ Running RED state TDD tests (features not yet implemented)"
          echo "These tests define contracts for features to be built"
          npm run test:feature || true
        env:
          NODE_ENV: test

      - name: Report Feature Test Status
        if: always()
        run: |
          echo "üìä Feature Test Status Report"
          echo "=============================="
          echo "RED state tests tracking unimplemented features."
          echo "These will turn GREEN as features are completed."

  # MEMORY DISTRIBUTION: Test sharding for CI resilience
  # Per holistic-orchestrator research recommendations
  test-shard-1:
    runs-on: ubuntu-latest
    needs: test-and-validate  # Run after main validation passes
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache node modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Test Shard 1/2
        run: npm test -- --shard=1/2
        env:
          NODE_ENV: test
          NODE_OPTIONS: "--max-old-space-size=8192"

  test-shard-2:
    runs-on: ubuntu-latest
    needs: test-and-validate  # Run after main validation passes
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache node modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Test Shard 2/2
        run: npm test -- --shard=2/2
        env:
          NODE_ENV: test
          NODE_OPTIONS: "--max-old-space-size=8192"